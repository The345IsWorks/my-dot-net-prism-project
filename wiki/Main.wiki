#summary One-sentence summary of this page.

= Introduction to Prism =

This is a exercise in .NET Prism pattern library, where we follow the [http://pluralsight.com/training/courses/TableOfContents?courseName=prism-introduction&highlight=brian-lagunas_prism1-01-intro*1,3,4,7,0,2,8,5,6!brian-lagunas_prism1-02-bootstrapper-shell*0,9,1,2,6,3,4,5,7,8!brian-lagunas_prism1-03-regions*0,1,2,4,6,3,5!brian-lagunas_prism1-04-modules*0,1,4,10,11,2,3,5,6,7,8,9!brian-lagunas_prism1-05-views*0,1,5,6,8,11,2,7,9,3,10,4!brian-lagunas_prism1-6-communication*0,1,2,4,6,8,10,12,3,5,7,11,9!brian-lagunas_prism1-07-state-based-navigation*0,5,4,1,2,3!brian-lagunas_prism1-08-view-based-navigation*0,13,1,3,5,6,7,9,11,2,4,8,10,12#prism1-01-intro pluralsight tutorial] with with Brian Lagunas
<br />
<img src="http://s17.postimg.org/brbnpypjz/app.png" width="400px"></img>


== 1. Getting started with Prism ==

=== INTRODUCTION ===
Exercise in Prism pattern library
How to architect your projects so they will evolve and stand the test off time and don't break the second you change something. That is what Prism can give you.

  * What is Prism?
  * Benefits
  * Get Prism
  * How it works

=== WHAT IS PRISM? ===
Framework for developing composite applications.
Take large applications and break it down to smaller more manageable peaces.
It is specific to WPF, Silverlight and Windows Phone 7.
Relies on design patterns to help promote loose coupling and separation  of concern.
some patterns are:
  * dependency injection pattern
  * version of control pattern
  * command pattern
  * Model View ViewModel MVVM pattern
just to name a few.


=== BENEFITS ===
  * *REUSE* - It was designed around architectural design patterns such as [http://en.wikipedia.org/wiki/Separation_of_concerns separation of concerns] and loose coupling this allows Prism to provide you with many benefits. Most common benefit when using a framework is REUSE, where you can build a component once and use it multiple times in an single application or cross applications and with Prism you take it a step further where you can build a component in WPF and use it in Silverlight so it is cross platforms.
  * *EXTENSIBLE* - allows you to add new capabilityes and more easely intergrate them to your system
  * *FLEXIBLE* - can have components replaced with alternetiv implementations at runntime
  * *TEAM DEVELOPMENT* - with larger projects broken down too smaller components it allows for multiple group members to work in the project at the same time
  * *QUALITY* - Increases the quality of the code, because the application is broken down into smaller more manageable peaces, it allows common services and components to be fully tested.